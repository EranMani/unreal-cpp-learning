# This file will contain information during learning process

Auto posses player
	* To let unreal possess/use our own character instead of the default one, go to:
		- actor blueprint > search for 'auto' > select player0 at auto possess player option
		
Compiles and editors
	[Glossary]
	- source code: human readable code (like c++ or blueprint)
	- binary executable: machine readable code
	- compiler: translates from human (source) to machine (binary)
	- source code editor: makes writing code fun
	
	* unreal ecosystem - the editor is a piece of software and is one that has already been compiled for us, we already have the executable for that editor.
					     The editor allows to modify and create the game project using various game assets, like meshes and blueprints.
					     We can then run the game in a separate standalone executable where it just playes the game
						 editor -> game assets -> game
						 
						 C++ is the bedrock of the editor, and once we change c++ in the editor we need to rebuild the editor binary executable.
						 source code editor -> source code -> compiler
						 
						 The compiler will take the source code, the libraries and functionality already built into unreal - will compile these together,
						 turn them into binary or output. Either an editor that we can open up and edit the game assets, or it will output a game which
						 will take the game assets and allow the player to just play the game
						 
						 Compiler will use the software Visual Studio
						 Source code will use the software Visual Studio Code
						 
C++ class
	* To create a new class, go to Tools -> new c++ class -> select between various options -> select its name -> create
	* Once done, it will open the visual studio code
	* To recompile the editor binary (make sure to close unreal editor first), go to Terminal -> Run build task -> select task projectnameEditor win64 development build
	
Unreal C++
	* Live coding - a way to compile new code fast, within the editor.
					Its button can be found in the viewport lower right point, an icon of fading cubes. Press that and the recompile will begin
					Live coding have some bugs, mostly in the area where you compile new variables, override their values, closing and opening the editor-
						will make the variable disappear. Simply restart the editor, or compile using vscode
	* BeginPlay() - whatever is written in the function, will be executed as soon as the game starts playing
	* FVector - a variable type for vectors
	* A suffix - the variable is of actor type
	* F suffix - the variable is of struct type
	[Functions]
	- SetActorLocation()
	- SetActorScale3D()
	
	
C++
	* header (file.h) - a file to add variables and functions. For configuring and declaring what things are in the class
	* c++ (file.cpp) - the coding itself (like blueprint eventgraph) will happen in this file. Where the actual code lives.
	* the class name will have the prefix A, which means actor (for example AMovingPlatform)
	* How to write a variable? -> int32 MyInt = 99; -- bool ShouldPlay = true;
	* Double check your capitalization and the semicolons
	* How to make a variable visible in the blueprint editor?
		UPROPERTY - add UPROPERTY(EditAnywhere), above the variable line
	* If you override the default values of the variables in the editor, then it will override everything done in C++
	* When using a struct, we need to use the constructor. The constructor will always have the same name as the data type
	[Glossary]
	- constructor: makes a new struct or class value
	- operator: symbols that do something
	- dot operator: gets something from within a struct or class
	
Game loop
	* The game engine will take the input from the player
	* The input information will be used to update the game state
	* Render it to the display
	[Glossary]
	- frame: a single picture in a video
	- frame rate: how many frames per second (FPS)
	- tick: called every frame. Help us to update the state of the game every single frame
	
Scope
	* How long does the variable live?
	* Variables of a class instance lives as long as the class does
	* In a function, the variable is valid between curly braces
	* You can always know what value is going to be in a local variable, unlike a class variable which can be updated any time from any other function