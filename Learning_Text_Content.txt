# This file will contain information during learning process

Light Types
	* Directional light - used as a sun light, goes into a single direction
	* Point light - a point source of light
	* Spot light - useful for trying to illuminate a specific area or a specific object
	* Rect light - light is emanating from the entirety of the rectangle shape. This would work with office lighting or anything where you want to illuminate
				   from a larger area rather than from a particular point
	* Sky light - the light is coming from all directions. 
				  You need to create a large sphere that will envelop the whole scene, and sky light will use that sphere properties to capture scene
				  light color.
				  [NOTE] You can grab one of those spheres from the hidden engine folder
				  
	* A useful combination of light will be to the sky light(with the sky sphere object) + directional light.
	  In the sky sphere blueprint, you can link the directional light and use it to change the properties of the sky sphere.
	  By linking those two (sky sphere + directional light) in together, the sky sphere should match the angle of this directional light. 
	  [NOTE] Once you change the directional light, you should check the 'refresh material' property in the sky sphere blueprint
	  
Lights
	* Lumen - a real time global illumination light engine
	* Lumen works best when lights mobility setting is set to moveable
	
Variable addresses
	* We store all of our variables in memory
	* Variables require memory to store their data
	* The bigger the struct or classes you have will encompass a lot of data that might require even a few kb of memory per actor
	* This memory has to live somewhere, and that location is known as an address. An actor needs to have a certain location within this large field
	  of 0 and 1, and it is allocated to store the data in the actor
	* Pointers - instead of storing the entirety of an actor data variable to another one, we can create an actor pointer that doesnt store the whole
				 actor, it just stores the address where you can find an actor. This uses a lot less memory to store an address.
				 AActor MyActor = ..; ---> [CPP]AActor MyActor = ..;
				 AActor Pointer YourActor; ---> [CPP]AActor* YourActor;
				 YourActor = AddressOf(MyActor); ---> [CPP]YourActor = &MyActor;
				 
				 AActor* - this is an actor pointer, the address of an actor being stored
				 &MyActor - get the address of a variable
				 
				 This ends up pointing to the original actor, rather than copying the data over, hence the name POINTER
	
C++
	* Inheritance VS Composition - 
		inheritance: when a child class inherits from a parent calss, the child acquires all behaviors from the parent. Inheritance will make a class
					 hierarchy
					 Person ---  -> Student
							|--  -> Employee
		composition: in contrast to inheritance, it enables the creation of complex types by combining objects (components) of other types, rather
					 than inheriting from a base or parent class. A composition contains instances of other classes that implement the desired functionality
					 You can imagine a composition as playting with legos, while components are the lego bricks
		The main difference between them is in the relationship between objects: Is-a VS Has-a
		They are different in purpose too -
			inheritance: used to design a class on what it is
			composition: to design a class on what it does
	
	[Glossary]
	* Inheritance: a child class automatically has all the functionality of the parent. The child "is a" parent
	* Composition: class A has an instance of class B. It can choose to use its functionality but doesnt have to, it can just choose to take the
				   bits it wants. Class A "has a" Class B
				   
Unreal C++
	* Actor component - you can add a c++ component to objects
	* The component is OWNED by the actor. If we want a component to talk to our actor, to get its location and other things, we need to be able to
	  get a pointer to that actor. We dont want to take a copy of it.
	[NOTE] DO NOT(!) STORE A COPY OF AN ACTOR DATA INTO A VARIABLE. USE POINTER INSTEAD TO BE MORE EFFICIENT
	[Functions]
	* GetOwner(): a function of an actor component which allows to get an owner pointer
	
	
	