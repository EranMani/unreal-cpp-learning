# This file will contain information during learning process

Light Types
	* Directional light - used as a sun light, goes into a single direction
	* Point light - a point source of light
	* Spot light - useful for trying to illuminate a specific area or a specific object
	* Rect light - light is emanating from the entirety of the rectangle shape. This would work with office lighting or anything where you want to illuminate
				   from a larger area rather than from a particular point
	* Sky light - the light is coming from all directions. 
				  You need to create a large sphere that will envelop the whole scene, and sky light will use that sphere properties to capture scene
				  light color.
				  [NOTE] You can grab one of those spheres from the hidden engine folder
				  
	* A useful combination of light will be to the sky light(with the sky sphere object) + directional light.
	  In the sky sphere blueprint, you can link the directional light and use it to change the properties of the sky sphere.
	  By linking those two (sky sphere + directional light) in together, the sky sphere should match the angle of this directional light. 
	  [NOTE] Once you change the directional light, you should check the 'refresh material' property in the sky sphere blueprint
	  
Lights
	* Lumen - a real time global illumination light engine
	* Lumen works best when lights mobility setting is set to moveable
	
C++
	* Inheritance VS Composition - 
		inheritance: when a child class inherits from a parent calss, the child acquires all behaviors from the parent. Inheritance will make a class
					 hierarchy
					 Person ---  -> Student
							|--  -> Employee
		composition: in contrast to inheritance, it enables the creation of complex types by combining objects (components) of other types, rather
					 than inheriting from a base or parent class. A composition contains instances of other classes that implement the desired functionality
					 You can imagine a composition as playting with legos, while components are the lego bricks
		The main difference between them is in the relationship between objects: Is-a VS Has-a
		They are different in purpose too -
			inheritance: used to design a class on what it is
			composition: to design a class on what it does
	
	[Glossary]
	* Inheritance: a child class automatically has all the functionality of the parent. The child "is a" parent
	* Composition: class A has an instance of class B. It can choose to use its functionality but doesnt have to, it can just choose to take the
				   bits it wants. Class A "has a" Class B
				   
Unreal C++
	* Actor component - you can add a c++ component to objects
	
	
	