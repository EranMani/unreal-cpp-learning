# This file will contain information during learning process

PROJECT1 - Warehouse Wreckage
* Blueprint (visual programming) - wire up different components to get a desired result
	[Glossary]
	- Event graph: the canvas for the blueprint
	- Node: a piece of pre-made functionality that can be dropped into the project and be used
	- Event: a "when" node
	- Pin: sockets you can connect up to each other
		* Input pin - when to run the node
		* Output pin - what to do after
		* Connection - wires between pins
		
	[Functions]
	- [EVENT] BeginPlay(): what happens when the play button is pressed / game begins
	- PrintString()
	- [KEYBOARD EVENT] SpaceBar() - fire an event when the space bar key is pressed or released
	
* Physics
	- by default, physics are not applied to actors (in order to not cause heavy load on the CPU)
	- To apply physics to an actor, select it -> physics (details tab) -> check 'simulate physics'
	[Properties]
	- enable gravity: gravity will not applied to actor. The actor will float in the air
	- mass: how much something weights, how many kg of substance is there 
	[Glossary]
	- force: happens over a certain amount of time
	- impulse: is instantaneous
	- force = mass * acceleration
	- impulse = mass * velocity change
	
	[Functions]
	- AddImpulse()
		impulse vector: value should be multiplied by the object mass.
		vel change: ignores the mass entirely and just applies whatever velocity you want
		
	
* Objects and references
	- objects: something that you want to represent a thing.
		EX: the player, an object in the world with some data that represents what he is
			[data] experience, level
			[functionality] fire arrows, jump
		its a little bit of a mapping between the objects and the functionality
	- reference: an address that shows where to find this object in the computer's memory. When you find the cube, you can do sort of things like
				 using functionality
	[Glossary]
	- objects: collections of data and functionality
	- actors: objects that can go in a level
	- components: objects that can go on an actor
	- reference: where to find an object
	- data pin: the input or output data for a node
	- execution pins: when to run this node
	
	[Functions]
	- GetStaticMeshComponent()
	- GetDisplayName()
	
* Classes and instances
	- class: a template or a blueprint for objects. Something that we make the objects from
	- instance: this is the actual object, derived from the class
	- objects from the same class will share the same functionality and they can have their own version of the data
	- benefits:
		1) sharing functionality between different objects
		2) if you change data in the class, it will automatically be applied to its instances
	- you can create a primitive actor (sphere, cube) and convert it to a blueprint class
	- to create an instance of a blueprint class, you simply drag it into scene or spawn it by blueprint command.
	- when you change a property in the blueprint class, it will be applied to its instances in the scene
	
* Spawn actors
	- Creating an object while playing
	[Glossary]
	- transform: location, rotation and scale
	
	[Functions]
	- SpawnActorFromClass(): returns the new object that spawned